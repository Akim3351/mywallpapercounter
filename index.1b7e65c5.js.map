{"mappings":"AACO,IAkBIA,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC9BL,MAAMG,EAAaC,SAASC,eAAe,cACfD,SAASC,eAAe,kBAEhCC,iBAAiB,SAGrC,WACI,MAEMC,EAAe,sCADJd,6bAejBU,EAAWK,mBAAmB,YAAaD,E","sources":["node_modules/nanoid/index.browser.js","src/js/add-inputs.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nconst inputsList = document.getElementById(\"inputslist\");\nconst addDoorsInputButton = document.getElementById(\"addinputbutton\");\n\naddDoorsInputButton.addEventListener('click', addInput);\n\n\nfunction addInput() {\n    const formStringArray = [];\n    const randomId = nanoid();\n    const markupString = `\n    <li class=\"inputs__item\" key=${randomId}>\n    <select class=\"door__select\">\n        <option value=\"door\">Door</option>\n        <option value=\"window\">Window</option>\n    </select>\n    <input type=\"number\" class=\"door__input\">\n    <input type=\"number\" class=\"door__input\">\n    <button type=\"button\" id=\"deleteinputbutton\" class=\"delete__button\">\n        <svg class=\"button__icon\">\n            <use href='./images/sprite.svg#delete'/>\n        </svg>\n    </button>\n</li>`;\n    inputsList.insertAdjacentHTML('beforeend', markupString);\n\n}\n\n"],"names":["$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$05f5166743c3e635$var$inputsList","document","getElementById","addEventListener","markupString","insertAdjacentHTML"],"version":3,"file":"index.1b7e65c5.js.map"}